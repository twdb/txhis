################################################## 
# TxHISCentralRegistry_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from TxHISCentralRegistry_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class TxHISCentralRegistryLocator:
    TxHISCentralRegistry_address = "http://greylin:9080/HISCentralService"
    def getTxHISCentralRegistryAddress(self):
        return TxHISCentralRegistryLocator.TxHISCentralRegistry_address
    def getTxHISCentralRegistry(self, url=None, **kw):
        return TxHISCentralRegistrySOAPSOAP(url or TxHISCentralRegistryLocator.TxHISCentralRegistry_address, **kw)

# Methods
class TxHISCentralRegistrySOAPSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: GetSourcesGEMSS
    def GetSourcesGEMSS(self, request):
        if isinstance(request, GetSourcesGEMSSRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://greylin/TxHISCentralRegistry/GetSourcesGEMSS", **kw)
        # no output wsaction
        response = self.binding.Receive(GetSourcesGEMSSResponse.typecode)
        return response

    # op: GetTXHISConvertedOutputGEMSS
    def GetTXHISConvertedOutputGEMSS(self, request):
        if isinstance(request, GetTXHISConvertedOutputGEMSSRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://greylin/TxHISCentralRegistry/GetTXHISConvertedOutputGEMSS", **kw)
        # no output wsaction
        response = self.binding.Receive(GetTXHISConvertedOutputGEMSSResponse.typecode)
        return response

    # op: GetTXHISParameters
    def GetTXHISParameters(self, request):
        if isinstance(request, GetTXHISParametersRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://greylin/TxHISCentralRegistry/GetTXHISParameters", **kw)
        # no output wsaction
        response = self.binding.Receive(GetTXHISParametersResponse.typecode)
        return response

    # op: GetRemoteParameterCode
    def GetRemoteParameterCode(self, request):
        if isinstance(request, GetRemoteParameterCodeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://greylin/TxHISCentralRegistry/GetRemoteParameterCode", **kw)
        # no output wsaction
        response = self.binding.Receive(GetRemoteParameterCodeResponse.typecode)
        return response

    # op: GetHISParamAvailableSources
    def GetHISParamAvailableSources(self, request):
        if isinstance(request, GetHISParamAvailableSourcesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://greylin/TxHISCentralRegistry/GetHISParamAvailableSources", **kw)
        # no output wsaction
        response = self.binding.Receive(GetHISParamAvailableSourcesResponse.typecode)
        return response

GetSourcesGEMSSRequest = ns0.GetSourcesGEMSS_Dec().pyclass

GetSourcesGEMSSResponse = ns0.GetSourcesGEMSSResponse_Dec().pyclass

GetTXHISConvertedOutputGEMSSRequest = ns0.GetTXHISConvertedOutputGEMSS_Dec().pyclass

GetTXHISConvertedOutputGEMSSResponse = ns0.GetTXHISConvertedOutputGEMSSResponse_Dec().pyclass

GetTXHISParametersRequest = ns0.GetTXHISParameters_Dec().pyclass

GetTXHISParametersResponse = ns0.GetTXHISParametersResponse_Dec().pyclass

GetRemoteParameterCodeRequest = ns0.GetRemoteParameterCode_Dec().pyclass

GetRemoteParameterCodeResponse = ns0.GetRemoteParameterCodeResponse_Dec().pyclass

GetHISParamAvailableSourcesRequest = ns0.GetHISParamAvailableSources_Dec().pyclass

GetHISParamAvailableSourcesResponse = ns0.GetHISParamAvailableSourcesResponse_Dec().pyclass
