################################################## 
# TxHISCentralRegistry_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://greylin/TxHISCentralRegistry/
##############################

class ns0:
    targetNamespace = "http://greylin/TxHISCentralRegistry/"

    class ServiceDetail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://greylin/TxHISCentralRegistry/"
        type = (schema, "ServiceDetail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ServiceDetail_Def.schema
            TClist = [ZSI.TC.String(pname="RemoteSourceURL", aname="_RemoteSourceURL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SourceFormat", aname="_SourceFormat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="RemoteSourceNetWorkName", aname="_RemoteSourceNetWorkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.UpdateFrequencyType_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="UpdateFrequencyValue", aname="_UpdateFrequencyValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SourceSummarizedDescription", aname="_SourceSummarizedDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SourceDescriptionLink", aname="_SourceDescriptionLink", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SourceLogoLink", aname="_SourceLogoLink", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://greylin/TxHISCentralRegistry/","SourceParameterCodesType",lazy=False)(pname="RemoteSourceParameterCodes", aname="_RemoteSourceParameterCodes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RemoteSourceURL = None
                    self._SourceFormat = None
                    self._RemoteSourceNetWorkName = None
                    self._UpdateFrequencyType = None
                    self._UpdateFrequencyValue = None
                    self._SourceSummarizedDescription = None
                    self._SourceDescriptionLink = None
                    self._SourceLogoLink = None
                    self._RemoteSourceParameterCodes = None
                    return
            Holder.__name__ = "ServiceDetail_Holder"
            self.pyclass = Holder


        class UpdateFrequencyType_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "UpdateFrequencyType"
            schema = "http://greylin/TxHISCentralRegistry/"
            def __init__(self, **kw):
                kw["pname"] = ("http://greylin/TxHISCentralRegistry/","UpdateFrequencyType")
                kw["aname"] = "_UpdateFrequencyType"
                ZSI.TC.String.__init__(self, **kw)




    class SourceParameterCodesType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://greylin/TxHISCentralRegistry/"
        type = (schema, "SourceParameterCodesType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SourceParameterCodesType_Def.schema
            TClist = [ZSI.TC.String(pname="SourceParameterCode", aname="_SourceParameterCode", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SourceParameterCode = []
                    return
            Holder.__name__ = "SourceParameterCodesType_Holder"
            self.pyclass = Holder

    class ValuesArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://greylin/TxHISCentralRegistry/"
        type = (schema, "ValuesArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ValuesArray_Def.schema
            TClist = [ZSI.TCnumbers.FPfloat(pname="value", aname="_value", minOccurs=1, maxOccurs=1000, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = []
                    return
            Holder.__name__ = "ValuesArray_Holder"
            self.pyclass = Holder

    class TXHISResponseObjType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://greylin/TxHISCentralRegistry/"
        type = (schema, "TXHISResponseObjType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TXHISResponseObjType_Def.schema
            TClist = [ZSI.TC.String(pname="TXHISParameterName", aname="_TXHISParameterName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TXHISParameterCode", aname="_TXHISParameterCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TXHISParameterDescription", aname="_TXHISParameterDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TXHISParameterUnit", aname="_TXHISParameterUnit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TXHISParameterUnitDescription", aname="_TXHISParameterUnitDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://greylin/TxHISCentralRegistry/","ValuesArray",lazy=False)(pname="TXHISParameterValues", aname="_TXHISParameterValues", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TXHISParameterName = None
                    self._TXHISParameterCode = None
                    self._TXHISParameterDescription = None
                    self._TXHISParameterUnit = None
                    self._TXHISParameterUnitDescription = None
                    self._TXHISParameterValues = None
                    return
            Holder.__name__ = "TXHISResponseObjType_Holder"
            self.pyclass = Holder

    class ParameterArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://greylin/TxHISCentralRegistry/"
        type = (schema, "ParameterArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ParameterArray_Def.schema
            TClist = [GTD("http://greylin/TxHISCentralRegistry/","ParameterInfo",lazy=False)(pname="ParameterInstance", aname="_ParameterInstance", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ParameterInstance = []
                    return
            Holder.__name__ = "ParameterArray_Holder"
            self.pyclass = Holder

    class ParameterInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://greylin/TxHISCentralRegistry/"
        type = (schema, "ParameterInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ParameterInfo_Def.schema
            TClist = [ZSI.TC.String(pname="ParameterCode", aname="_ParameterCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ParameterName", aname="_ParameterName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ParameterCode = None
                    self._ParameterName = None
                    return
            Holder.__name__ = "ParameterInfo_Holder"
            self.pyclass = Holder

    class SourceWithRemoteParamCode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://greylin/TxHISCentralRegistry/"
        type = (schema, "SourceWithRemoteParamCode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SourceWithRemoteParamCode_Def.schema
            TClist = [ZSI.TC.String(pname="WSDLLink", aname="_WSDLLink", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SourceName", aname="_SourceName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="RemoteParamCode", aname="_RemoteParamCode", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._WSDLLink = None
                    self._SourceName = None
                    self._RemoteParamCode = []
                    return
            Holder.__name__ = "SourceWithRemoteParamCode_Holder"
            self.pyclass = Holder

    class GetSourcesGEMSS_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSourcesGEMSS"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetSourcesGEMSS_Dec.schema
            TClist = []
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetSourcesGEMSS")
            kw["aname"] = "_GetSourcesGEMSS"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetSourcesGEMSS_Holder"
            self.pyclass = Holder

    class GetSourcesGEMSSResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSourcesGEMSSResponse"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetSourcesGEMSSResponse_Dec.schema
            TClist = [GTD("http://greylin/TxHISCentralRegistry/","ServiceDetail",lazy=False)(pname="ServiceDetail", aname="_ServiceDetail", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetSourcesGEMSSResponse")
            kw["aname"] = "_GetSourcesGEMSSResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ServiceDetail = []
                    return
            Holder.__name__ = "GetSourcesGEMSSResponse_Holder"
            self.pyclass = Holder

    class GetTXHISConvertedOutputGEMSS_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetTXHISConvertedOutputGEMSS"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetTXHISConvertedOutputGEMSS_Dec.schema
            TClist = [ZSI.TC.String(pname="RemoteSourceURL", aname="_RemoteSourceURL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="RemoteSourceNetworkName", aname="_RemoteSourceNetworkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="RemoteSourceParameterCode", aname="_RemoteSourceParameterCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://greylin/TxHISCentralRegistry/","ValuesArray",lazy=False)(pname="RemoteValues", aname="_RemoteValues", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetTXHISConvertedOutputGEMSS")
            kw["aname"] = "_GetTXHISConvertedOutputGEMSS"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RemoteSourceURL = None
                    self._RemoteSourceNetworkName = None
                    self._RemoteSourceParameterCode = None
                    self._RemoteValues = None
                    return
            Holder.__name__ = "GetTXHISConvertedOutputGEMSS_Holder"
            self.pyclass = Holder

    class GetTXHISConvertedOutputGEMSSResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetTXHISConvertedOutputGEMSSResponse"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetTXHISConvertedOutputGEMSSResponse_Dec.schema
            TClist = [GTD("http://greylin/TxHISCentralRegistry/","TXHISResponseObjType",lazy=False)(pname="TXHISResponseObj", aname="_TXHISResponseObj", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetTXHISConvertedOutputGEMSSResponse")
            kw["aname"] = "_GetTXHISConvertedOutputGEMSSResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TXHISResponseObj = None
                    return
            Holder.__name__ = "GetTXHISConvertedOutputGEMSSResponse_Holder"
            self.pyclass = Holder

    class GetConvertedOutputFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetConvertedOutputFault"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetConvertedOutputFault_Dec.schema
            TClist = [ZSI.TC.String(pname="GetConvertedOutputFault", aname="_GetConvertedOutputFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetConvertedOutputFault")
            kw["aname"] = "_GetConvertedOutputFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetConvertedOutputFault = None
                    return
            Holder.__name__ = "GetConvertedOutputFault_Holder"
            self.pyclass = Holder

    class GetTXHISParameters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetTXHISParameters"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetTXHISParameters_Dec.schema
            TClist = []
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetTXHISParameters")
            kw["aname"] = "_GetTXHISParameters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetTXHISParameters_Holder"
            self.pyclass = Holder

    class GetTXHISParametersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetTXHISParametersResponse"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetTXHISParametersResponse_Dec.schema
            TClist = [GTD("http://greylin/TxHISCentralRegistry/","ParameterArray",lazy=False)(pname="ParameterList", aname="_ParameterList", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetTXHISParametersResponse")
            kw["aname"] = "_GetTXHISParametersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ParameterList = None
                    return
            Holder.__name__ = "GetTXHISParametersResponse_Holder"
            self.pyclass = Holder

    class GetRemoteParameterCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetRemoteParameterCode"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetRemoteParameterCode_Dec.schema
            TClist = [ZSI.TC.String(pname="SourceNetworkName", aname="_SourceNetworkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TXHISParameterCode", aname="_TXHISParameterCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="WSDLLink", aname="_WSDLLink", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetRemoteParameterCode")
            kw["aname"] = "_GetRemoteParameterCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SourceNetworkName = None
                    self._TXHISParameterCode = None
                    self._WSDLLink = None
                    return
            Holder.__name__ = "GetRemoteParameterCode_Holder"
            self.pyclass = Holder

    class GetRemoteParameterCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetRemoteParameterCodeResponse"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetRemoteParameterCodeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="RemoteParameterCode", aname="_RemoteParameterCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetRemoteParameterCodeResponse")
            kw["aname"] = "_GetRemoteParameterCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RemoteParameterCode = None
                    return
            Holder.__name__ = "GetRemoteParameterCodeResponse_Holder"
            self.pyclass = Holder

    class GetHISParamAvailableSources_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetHISParamAvailableSources"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetHISParamAvailableSources_Dec.schema
            TClist = [ZSI.TC.String(pname="HISParamCode", aname="_HISParamCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetHISParamAvailableSources")
            kw["aname"] = "_GetHISParamAvailableSources"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._HISParamCode = None
                    return
            Holder.__name__ = "GetHISParamAvailableSources_Holder"
            self.pyclass = Holder

    class GetHISParamAvailableSourcesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetHISParamAvailableSourcesResponse"
        schema = "http://greylin/TxHISCentralRegistry/"
        def __init__(self, **kw):
            ns = ns0.GetHISParamAvailableSourcesResponse_Dec.schema
            TClist = [GTD("http://greylin/TxHISCentralRegistry/","SourceWithRemoteParamCode",lazy=False)(pname="SourceWithParamCodeInstance", aname="_SourceWithParamCodeInstance", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://greylin/TxHISCentralRegistry/","GetHISParamAvailableSourcesResponse")
            kw["aname"] = "_GetHISParamAvailableSourcesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SourceWithParamCodeInstance = []
                    return
            Holder.__name__ = "GetHISParamAvailableSourcesResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://greylin/TxHISCentralRegistry/)
