#
# Generated Wed May 05 13:34:56 2010 by generateDS.py version 1.20f.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


class GeogLocationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, srs='EPSG:4326', valueOf_=None):
        self.srs = _cast(None, srs)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if GeogLocationType.subclass:
            return GeogLocationType.subclass(*args_, **kwargs_)
        else:
            return GeogLocationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_srs(self): return self.srs
    def set_srs(self, srs): self.srs = srs
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='GeogLocationType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='GeogLocationType')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='GeogLocationType'):
        if self.srs is not None:
            outfile.write(' srs=%s' % (self.format_string(quote_attrib(self.srs).encode(ExternalEncoding), input_name='srs'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='GeogLocationType'):
        #if valueOf is empty, no children needs to be exported
        if not self.valueOf_: return
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GeogLocationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.srs is not None:
            showIndent(outfile, level)
            outfile.write('srs = "%s",\n' % (self.srs,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('srs'):
            self.srs = attrs.get('srs').value
    def buildChildren(self, child_, nodeName_):
        self.valueOf_ = ''
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class GeogLocationType


class LatLonPointType(GeogLocationType):
    subclass = None
    superclass = GeogLocationType
    def __init__(self, srs='EPSG:4326', latitude=None, longitude=None):
        GeogLocationType.__init__(self, srs)
        self.latitude = latitude
        self.longitude = longitude
    def factory(*args_, **kwargs_):
        if LatLonPointType.subclass:
            return LatLonPointType.subclass(*args_, **kwargs_)
        else:
            return LatLonPointType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_latitude(self): return self.latitude
    def set_latitude(self, latitude): self.latitude = latitude
    def validate_latitude(self, value):
        # validate type latitude
        pass
    def get_longitude(self): return self.longitude
    def set_longitude(self, longitude): self.longitude = longitude
    def validate_longitude(self, value):
        # validate type longitude
        pass
    def export(self, outfile, level, namespace_='', name_='LatLonPointType', namespacedef_=''):
        #adjust the tag name for this xml element       
        if self.superclass.subclass == self.__class__:
            name_ = "geogLocationType"
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='LatLonPointType')
        #outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
        outfile.write(' xsi:type="LatLonPointType"')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='LatLonPointType'):
        GeogLocationType.exportAttributes(self, outfile, level, namespace_, name_='LatLonPointType')
    def exportChildren(self, outfile, level, namespace_='', name_='LatLonPointType'):
        GeogLocationType.exportChildren(self, outfile, level, namespace_, name_)
        if self.latitude is not None:
            showIndent(outfile, level)
            outfile.write('<%slatitude>%s</%slatitude>\n' % (namespace_, self.format_string(quote_xml(self.latitude).encode(ExternalEncoding), input_name='latitude'), namespace_))
        if self.longitude is not None:
            showIndent(outfile, level)
            outfile.write('<%slongitude>%s</%slongitude>\n' % (namespace_, self.format_string(quote_xml(self.longitude).encode(ExternalEncoding), input_name='longitude'), namespace_))
    def hasContent_(self):
        if (
            self.latitude is not None or
            self.longitude is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='LatLonPointType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        GeogLocationType.exportLiteralAttributes(self, outfile, level, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        GeogLocationType.exportLiteralChildren(self, outfile, level, name_)
        if self.latitude is not None:
            showIndent(outfile, level)
            outfile.write('latitude=%s,\n' % quote_python(self.latitude).encode(ExternalEncoding))
        if self.longitude is not None:
            showIndent(outfile, level)
            outfile.write('longitude=%s,\n' % quote_python(self.longitude).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        GeogLocationType.buildAttributes(self, attrs)
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'latitude':
            latitude_ = ''
            for text__content_ in child_.childNodes:
                latitude_ += text__content_.nodeValue
            self.latitude = latitude_
            self.validate_latitude(self.latitude)    # validate type latitude
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'longitude':
            longitude_ = ''
            for text__content_ in child_.childNodes:
                longitude_ += text__content_.nodeValue
            self.longitude = longitude_
            self.validate_longitude(self.longitude)    # validate type longitude
        GeogLocationType.buildChildren(self, child_, nodeName_)
# end class LatLonPointType


class LatLonBoxType(GeogLocationType):
    subclass = None
    superclass = GeogLocationType
    def __init__(self, srs='EPSG:4326', south=None, west=None, north=None, east=None):
        GeogLocationType.__init__(self, srs)
        self.south = south
        self.west = west
        self.north = north
        self.east = east
    def factory(*args_, **kwargs_):
        if LatLonBoxType.subclass:
            return LatLonBoxType.subclass(*args_, **kwargs_)
        else:
            return LatLonBoxType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_south(self): return self.south
    def set_south(self, south): self.south = south
    def validate_south(self, value):
        # validate type south
        pass
    def get_west(self): return self.west
    def set_west(self, west): self.west = west
    def validate_west(self, value):
        # validate type west
        pass
    def get_north(self): return self.north
    def set_north(self, north): self.north = north
    def validate_north(self, value):
        # validate type north
        pass
    def get_east(self): return self.east
    def set_east(self, east): self.east = east
    def validate_east(self, value):
        # validate type east
        pass
    def export(self, outfile, level, namespace_='', name_='LatLonBoxType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='LatLonBoxType')
        outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
        outfile.write(' xsi:type="LatLonBoxType"')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='LatLonBoxType'):
        GeogLocationType.exportAttributes(self, outfile, level, namespace_, name_='LatLonBoxType')
    def exportChildren(self, outfile, level, namespace_='', name_='LatLonBoxType'):
        GeogLocationType.exportChildren(self, outfile, level, namespace_, name_)
        if self.south is not None:
            showIndent(outfile, level)
            outfile.write('<%ssouth>%s</%ssouth>\n' % (namespace_, self.format_string(quote_xml(self.south).encode(ExternalEncoding), input_name='south'), namespace_))
        if self.west is not None:
            showIndent(outfile, level)
            outfile.write('<%swest>%s</%swest>\n' % (namespace_, self.format_string(quote_xml(self.west).encode(ExternalEncoding), input_name='west'), namespace_))
        if self.north is not None:
            showIndent(outfile, level)
            outfile.write('<%snorth>%s</%snorth>\n' % (namespace_, self.format_string(quote_xml(self.north).encode(ExternalEncoding), input_name='north'), namespace_))
        if self.east is not None:
            showIndent(outfile, level)
            outfile.write('<%seast>%s</%seast>\n' % (namespace_, self.format_string(quote_xml(self.east).encode(ExternalEncoding), input_name='east'), namespace_))
    def hasContent_(self):
        if (
            self.south is not None or
            self.west is not None or
            self.north is not None or
            self.east is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='LatLonBoxType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        GeogLocationType.exportLiteralAttributes(self, outfile, level, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        GeogLocationType.exportLiteralChildren(self, outfile, level, name_)
        if self.south is not None:
            showIndent(outfile, level)
            outfile.write('south=%s,\n' % quote_python(self.south).encode(ExternalEncoding))
        if self.west is not None:
            showIndent(outfile, level)
            outfile.write('west=%s,\n' % quote_python(self.west).encode(ExternalEncoding))
        if self.north is not None:
            showIndent(outfile, level)
            outfile.write('north=%s,\n' % quote_python(self.north).encode(ExternalEncoding))
        if self.east is not None:
            showIndent(outfile, level)
            outfile.write('east=%s,\n' % quote_python(self.east).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        GeogLocationType.buildAttributes(self, attrs)
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'south':
            south_ = ''
            for text__content_ in child_.childNodes:
                south_ += text__content_.nodeValue
            self.south = south_
            self.validate_south(self.south)    # validate type south
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'west':
            west_ = ''
            for text__content_ in child_.childNodes:
                west_ += text__content_.nodeValue
            self.west = west_
            self.validate_west(self.west)    # validate type west
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'north':
            north_ = ''
            for text__content_ in child_.childNodes:
                north_ += text__content_.nodeValue
            self.north = north_
            self.validate_north(self.north)    # validate type north
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'east':
            east_ = ''
            for text__content_ in child_.childNodes:
                east_ += text__content_.nodeValue
            self.east = east_
            self.validate_east(self.east)    # validate type east
        GeogLocationType.buildChildren(self, child_, nodeName_)
# end class LatLonBoxType