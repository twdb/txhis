################################################## 
# WaterOneFlow_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.cuahsi.org/his/1.0/ws/
##############################

class ns0:
    targetNamespace = "http://www.cuahsi.org/his/1.0/ws/"

    class ArrayOfString_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        type = (schema, "ArrayOfString")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfString_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._string = []
                    return
            Holder.__name__ = "ArrayOfString_Holder"
            self.pyclass = Holder

    class GetSitesXml_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSitesXml"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetSitesXml_Dec.schema
            TClist = [GTD("http://www.cuahsi.org/his/1.0/ws/","ArrayOfString",lazy=False)(pname=(ns,"site"), aname="_site", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetSitesXml")
            kw["aname"] = "_GetSitesXml"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._site = None
                    self._authToken = None
                    return
            Holder.__name__ = "GetSitesXml_Holder"
            self.pyclass = Holder

    class GetSitesXmlResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSitesXmlResponse"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetSitesXmlResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"GetSitesXmlResult"), aname="_GetSitesXmlResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetSitesXmlResponse")
            kw["aname"] = "_GetSitesXmlResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetSitesXmlResult = None
                    return
            Holder.__name__ = "GetSitesXmlResponse_Holder"
            self.pyclass = Holder

    class GetSiteInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSiteInfo"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetSiteInfo_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"site"), aname="_site", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetSiteInfo")
            kw["aname"] = "_GetSiteInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._site = None
                    self._authToken = None
                    return
            Holder.__name__ = "GetSiteInfo_Holder"
            self.pyclass = Holder

    class GetSiteInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSiteInfoResponse"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetSiteInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"GetSiteInfoResult"), aname="_GetSiteInfoResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetSiteInfoResponse")
            kw["aname"] = "_GetSiteInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetSiteInfoResult = None
                    return
            Holder.__name__ = "GetSiteInfoResponse_Holder"
            self.pyclass = Holder

    class GetVariableInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetVariableInfo"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetVariableInfo_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"variable"), aname="_variable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetVariableInfo")
            kw["aname"] = "_GetVariableInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variable = None
                    self._authToken = None
                    return
            Holder.__name__ = "GetVariableInfo_Holder"
            self.pyclass = Holder

    class GetVariableInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetVariableInfoResponse"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetVariableInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"GetVariableInfoResult"), aname="_GetVariableInfoResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetVariableInfoResponse")
            kw["aname"] = "_GetVariableInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetVariableInfoResult = None
                    return
            Holder.__name__ = "GetVariableInfoResponse_Holder"
            self.pyclass = Holder

    class GetSites_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSites"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetSites_Dec.schema
            TClist = [GTD("http://www.cuahsi.org/his/1.0/ws/","ArrayOfString",lazy=False)(pname=(ns,"site"), aname="_site", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetSites")
            kw["aname"] = "_GetSites"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._site = None
                    self._authToken = None
                    return
            Holder.__name__ = "GetSites_Holder"
            self.pyclass = Holder

    class GetSitesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSitesResponse"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetSitesResponse_Dec.schema
            TClist = [GED("http://www.cuahsi.org/waterML/1.0/","sitesResponse",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetSitesResponse")
            kw["aname"] = "_GetSitesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sitesResponse = None
                    return
            Holder.__name__ = "GetSitesResponse_Holder"
            self.pyclass = Holder

    class GetSiteInfoObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSiteInfoObject"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetSiteInfoObject_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"site"), aname="_site", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetSiteInfoObject")
            kw["aname"] = "_GetSiteInfoObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._site = None
                    self._authToken = None
                    return
            Holder.__name__ = "GetSiteInfoObject_Holder"
            self.pyclass = Holder

    class GetSiteInfoObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSiteInfoObjectResponse"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetSiteInfoObjectResponse_Dec.schema
            TClist = [GED("http://www.cuahsi.org/waterML/1.0/","sitesResponse",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetSiteInfoObjectResponse")
            kw["aname"] = "_GetSiteInfoObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sitesResponse = None
                    return
            Holder.__name__ = "GetSiteInfoObjectResponse_Holder"
            self.pyclass = Holder

    class GetVariableInfoObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetVariableInfoObject"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetVariableInfoObject_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"variable"), aname="_variable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetVariableInfoObject")
            kw["aname"] = "_GetVariableInfoObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variable = None
                    self._authToken = None
                    return
            Holder.__name__ = "GetVariableInfoObject_Holder"
            self.pyclass = Holder

    class GetVariableInfoObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetVariableInfoObjectResponse"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetVariableInfoObjectResponse_Dec.schema
            TClist = [GED("http://www.cuahsi.org/waterML/1.0/","variablesResponse",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetVariableInfoObjectResponse")
            kw["aname"] = "_GetVariableInfoObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variablesResponse = None
                    return
            Holder.__name__ = "GetVariableInfoObjectResponse_Holder"
            self.pyclass = Holder

    class GetValues_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetValues"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetValues_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"location"), aname="_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"variable"), aname="_variable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startDate"), aname="_startDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetValues")
            kw["aname"] = "_GetValues"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    self._variable = None
                    self._startDate = None
                    self._endDate = None
                    self._authToken = None
                    return
            Holder.__name__ = "GetValues_Holder"
            self.pyclass = Holder

    class GetValuesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetValuesResponse"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetValuesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"GetValuesResult"), aname="_GetValuesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetValuesResponse")
            kw["aname"] = "_GetValuesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetValuesResult = None
                    return
            Holder.__name__ = "GetValuesResponse_Holder"
            self.pyclass = Holder

    class GetValuesObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetValuesObject"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetValuesObject_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"location"), aname="_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"variable"), aname="_variable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startDate"), aname="_startDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetValuesObject")
            kw["aname"] = "_GetValuesObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    self._variable = None
                    self._startDate = None
                    self._endDate = None
                    self._authToken = None
                    return
            Holder.__name__ = "GetValuesObject_Holder"
            self.pyclass = Holder

    class GetValuesObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetValuesObjectResponse"
        schema = "http://www.cuahsi.org/his/1.0/ws/"
        def __init__(self, **kw):
            ns = ns0.GetValuesObjectResponse_Dec.schema
            TClist = [GED("http://www.cuahsi.org/waterML/1.0/","timeSeriesResponse",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.cuahsi.org/his/1.0/ws/","GetValuesObjectResponse")
            kw["aname"] = "_GetValuesObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._timeSeriesResponse = None
                    return
            Holder.__name__ = "GetValuesObjectResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.cuahsi.org/his/1.0/ws/)

##############################
# targetNamespace
# http://www.cuahsi.org/waterML/1.0/
##############################

class ns1:
    targetNamespace = "http://www.cuahsi.org/waterML/1.0/"

    class SiteInfoResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "SiteInfoResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SiteInfoResponseType_Def.schema
            TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","QueryInfoType",lazy=False)(pname=(ns,"queryInfo"), aname="_queryInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.site_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._queryInfo = None
                    self._site = []
                    return
            Holder.__name__ = "SiteInfoResponseType_Holder"
            self.pyclass = Holder


        class site_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "site"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.SiteInfoResponseType_Def.site_Dec.schema
                TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","SiteInfoType",lazy=False)(pname=(ns,"siteInfo"), aname="_siteInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","seriesCatalogType",lazy=False)(pname=(ns,"seriesCatalog"), aname="_seriesCatalog", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"extension"), aname="_extension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","site")
                kw["aname"] = "_site"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._siteInfo = None
                        self._seriesCatalog = []
                        self._extension = None
                        return
                Holder.__name__ = "site_Holder"
                self.pyclass = Holder




    class QueryInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "QueryInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.QueryInfoType_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"creationTime"), aname="_creationTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"queryURL"), aname="_queryURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"querySQL"), aname="_querySQL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.criteria_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.note_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"extension"), aname="_extension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._creationTime = None
                    self._queryURL = None
                    self._querySQL = None
                    self._criteria = None
                    self._note = []
                    self._extension = None
                    return
            Holder.__name__ = "QueryInfoType_Holder"
            self.pyclass = Holder


        class criteria_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "criteria"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.QueryInfoType_Def.criteria_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"locationParam"), aname="_locationParam", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"variableParam"), aname="_variableParam", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.timeParam_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","criteria")
                kw["aname"] = "_criteria"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._locationParam = None
                        self._variableParam = None
                        self._timeParam = None
                        return
                Holder.__name__ = "criteria_Holder"
                self.pyclass = Holder


            class timeParam_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "timeParam"
                schema = "http://www.cuahsi.org/waterML/1.0/"
                def __init__(self, **kw):
                    ns = ns1.QueryInfoType_Def.criteria_Dec.timeParam_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"beginDateTime"), aname="_beginDateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","timeParam")
                    kw["aname"] = "_timeParam"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._beginDateTime = None
                            self._endDateTime = None
                            return
                    Holder.__name__ = "timeParam_Holder"
                    self.pyclass = Holder








        class note_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "note"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.QueryInfoType_Def.note_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","note")
                kw["aname"] = "_note"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "note_Holder"
                self.pyclass = Holder




    class SiteInfoType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "SiteInfoType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.SiteInfoType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"siteName"), aname="_siteName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.siteCode_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), self.__class__.timeZoneInfo_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.geoLocation_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"elevation_m"), aname="_elevation_m", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"verticalDatum"), aname="_verticalDatum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.note_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"extension"), aname="_extension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"altname"), aname="_altname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["oid"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["metadataDateTime"] = ZSI.TCtimes.gDateTime()
            # attribute handling code
            self.attribute_typecode_dict["oid"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["metadataDateTime"] = ZSI.TCtimes.gDateTime()
            if ns1.SourceInfoType_Def not in ns1.SiteInfoType_Def.__bases__:
                bases = list(ns1.SiteInfoType_Def.__bases__)
                bases.insert(0, ns1.SourceInfoType_Def)
                ns1.SiteInfoType_Def.__bases__ = tuple(bases)

            ns1.SourceInfoType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class siteCode_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "siteCode"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.SiteInfoType_Def.siteCode_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","siteCode")
                kw["aname"] = "_siteCode"
                self.attribute_typecode_dict = {}
                ZSI.TC.String.__init__(self,typed=False,**kw)
                class Holder(str):
                    __metaclass__ = pyclass_type
                    typecode = self
                    #def __init__(self):
                        # pyclass
                        #return
                Holder.__name__ = "siteCode_Holder"
                self.pyclass = Holder





        class timeZoneInfo_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "timeZoneInfo"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.SiteInfoType_Def.timeZoneInfo_Dec.schema
                TClist = [self.__class__.defaultTimeZone_Dec(minOccurs=1, maxOccurs=1, nillable=True, encoded=kw.get("encoded")), self.__class__.daylightSavingsTimeZone_Dec(minOccurs=1, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","timeZoneInfo")
                kw["aname"] = "_timeZoneInfo"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._defaultTimeZone = None
                        self._daylightSavingsTimeZone = None
                        return
                Holder.__name__ = "timeZoneInfo_Holder"
                self.pyclass = Holder


            class defaultTimeZone_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "defaultTimeZone"
                schema = "http://www.cuahsi.org/waterML/1.0/"
                def __init__(self, **kw):
                    ns = ns1.SiteInfoType_Def.timeZoneInfo_Dec.defaultTimeZone_Dec.schema
                    TClist = []
                    kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","defaultTimeZone")
                    kw["aname"] = "_defaultTimeZone"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    # attribute handling code
                    self.attribute_typecode_dict["ZoneAbbreviation"] = ZSI.TC.AnyType()
                    self.attribute_typecode_dict["ZoneOffset"] = ZSI.TC.String()
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            return
                    Holder.__name__ = "defaultTimeZone_Holder"
                    self.pyclass = Holder





            class daylightSavingsTimeZone_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "daylightSavingsTimeZone"
                schema = "http://www.cuahsi.org/waterML/1.0/"
                def __init__(self, **kw):
                    ns = ns1.SiteInfoType_Def.timeZoneInfo_Dec.daylightSavingsTimeZone_Dec.schema
                    TClist = []
                    kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","daylightSavingsTimeZone")
                    kw["aname"] = "_daylightSavingsTimeZone"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    # attribute handling code
                    self.attribute_typecode_dict["ZoneAbbreviation"] = ZSI.TC.AnyType()
                    self.attribute_typecode_dict["ZoneOffset"] = ZSI.TC.String()
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            return
                    Holder.__name__ = "daylightSavingsTimeZone_Holder"
                    self.pyclass = Holder








        class geoLocation_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "geoLocation"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.SiteInfoType_Def.geoLocation_Dec.schema
                TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","GeogLocationType",lazy=False)(pname=(ns,"geogLocation"), aname="_geogLocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.localSiteXY_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","geoLocation")
                kw["aname"] = "_geoLocation"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._geogLocation = None
                        self._localSiteXY = []
                        return
                Holder.__name__ = "geoLocation_Holder"
                self.pyclass = Holder


            class localSiteXY_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "localSiteXY"
                schema = "http://www.cuahsi.org/waterML/1.0/"
                def __init__(self, **kw):
                    ns = ns1.SiteInfoType_Def.geoLocation_Dec.localSiteXY_Dec.schema
                    TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"X"), aname="_X", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Y"), aname="_Y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Z"), aname="_Z", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.note_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","localSiteXY")
                    kw["aname"] = "_localSiteXY"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    # attribute handling code
                    self.attribute_typecode_dict["projectionInformation"] = ZSI.TC.String()
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._X = None
                            self._Y = None
                            self._Z = None
                            self._note = []
                            return
                    Holder.__name__ = "localSiteXY_Holder"
                    self.pyclass = Holder


                class note_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                    literal = "note"
                    schema = "http://www.cuahsi.org/waterML/1.0/"
                    def __init__(self, **kw):
                        ns = ns1.SiteInfoType_Def.geoLocation_Dec.localSiteXY_Dec.note_Dec.schema
                        TClist = []
                        kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","note")
                        kw["aname"] = "_note"
                        self.attribute_typecode_dict = {}
                        ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                        class Holder:
                            __metaclass__ = pyclass_type
                            typecode = self
                            def __init__(self):
                                # pyclass
                                return
                        Holder.__name__ = "note_Holder"
                        self.pyclass = Holder










        #this one is for siteInfo Node
        class note_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "note"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.SiteInfoType_Def.note_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","note")
                kw["aname"] = "_note"
                self.attribute_typecode_dict = {}
                ZSI.TC.String.__init__(self,typed=False,**kw)
                class Holder(str):
                    __metaclass__ = pyclass_type
                    typecode = self
                Holder.__name__ = "note_Holder"
                self.pyclass = Holder




    class SourceInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "SourceInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SourceInfoType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SourceInfoType_Holder"
            self.pyclass = Holder

    class DataSetInfoType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "DataSetInfoType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DataSetInfoType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"dataSetIdentifier"), aname="_dataSetIdentifier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.timeZoneInfo_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSetDescription"), aname="_dataSetDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.note_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","GeogLocationType",lazy=False)(pname=(ns,"dataSetLocation"), aname="_dataSetLocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"extension"), aname="_extension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.SourceInfoType_Def not in ns1.DataSetInfoType_Def.__bases__:
                bases = list(ns1.DataSetInfoType_Def.__bases__)
                bases.insert(0, ns1.SourceInfoType_Def)
                ns1.DataSetInfoType_Def.__bases__ = tuple(bases)

            ns1.SourceInfoType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class timeZoneInfo_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "timeZoneInfo"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.DataSetInfoType_Def.timeZoneInfo_Dec.schema
                TClist = [self.__class__.defaultTimeZone_Dec(minOccurs=1, maxOccurs=1, nillable=True, encoded=kw.get("encoded")), self.__class__.daylightSavingsTimeZone_Dec(minOccurs=1, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","timeZoneInfo")
                kw["aname"] = "_timeZoneInfo"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._defaultTimeZone = None
                        self._daylightSavingsTimeZone = None
                        return
                Holder.__name__ = "timeZoneInfo_Holder"
                self.pyclass = Holder


            class defaultTimeZone_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "defaultTimeZone"
                schema = "http://www.cuahsi.org/waterML/1.0/"
                def __init__(self, **kw):
                    ns = ns1.DataSetInfoType_Def.timeZoneInfo_Dec.defaultTimeZone_Dec.schema
                    TClist = []
                    kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","defaultTimeZone")
                    kw["aname"] = "_defaultTimeZone"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    # attribute handling code
                    self.attribute_typecode_dict["ZoneAbbreviation"] = ZSI.TC.AnyType()
                    self.attribute_typecode_dict["ZoneOffset"] = ZSI.TC.String()
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            return
                    Holder.__name__ = "defaultTimeZone_Holder"
                    self.pyclass = Holder





            class daylightSavingsTimeZone_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "daylightSavingsTimeZone"
                schema = "http://www.cuahsi.org/waterML/1.0/"
                def __init__(self, **kw):
                    ns = ns1.DataSetInfoType_Def.timeZoneInfo_Dec.daylightSavingsTimeZone_Dec.schema
                    TClist = []
                    kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","daylightSavingsTimeZone")
                    kw["aname"] = "_daylightSavingsTimeZone"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    # attribute handling code
                    self.attribute_typecode_dict["ZoneAbbreviation"] = ZSI.TC.AnyType()
                    self.attribute_typecode_dict["ZoneOffset"] = ZSI.TC.String()
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            return
                    Holder.__name__ = "daylightSavingsTimeZone_Holder"
                    self.pyclass = Holder








        class note_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "note"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.DataSetInfoType_Def.note_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","note")
                kw["aname"] = "_note"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "note_Holder"
                self.pyclass = Holder




    class GeogLocationType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "GeogLocationType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GeogLocationType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["srs"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self,typeIndicator="point"):
                    # pyclass
                    if (typeIndicator=="point"):
                        TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"latitude"), aname="_latitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"longitude"), aname="_longitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]               
                        self.typecode.setDerivedTypeContents(restrictions=TClist)
                        self._latitude=None
                        self._longitude=None
                    elif (typeIndicator=="box"):
                        TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"south"), aname="_south", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"west"), aname="_west", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"north"), aname="_north", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"east"), aname="_east", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                        self.typecode.setDerivedTypeContents(restrictions=TClist)
                        self._south=None
                        self._north=None
                        self._west=None
                        self._east=None
                    return
            Holder.__name__ = "GeogLocationType_Holder"
            self.pyclass = Holder

    class LatLonBoxType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "LatLonBoxType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.LatLonBoxType_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"south"), aname="_south", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"west"), aname="_west", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"north"), aname="_north", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"east"), aname="_east", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.GeogLocationType_Def not in ns1.LatLonBoxType_Def.__bases__:
                bases = list(ns1.LatLonBoxType_Def.__bases__)
                bases.insert(0, ns1.GeogLocationType_Def)
                ns1.LatLonBoxType_Def.__bases__ = tuple(bases)
            ns1.GeogLocationType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)
           

    class LatLonPointType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "LatLonPointType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.LatLonPointType_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"latitude"), aname="_latitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"longitude"), aname="_longitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.GeogLocationType_Def not in ns1.LatLonPointType_Def.__bases__:
                bases = list(ns1.LatLonPointType_Def.__bases__)
                bases.insert(0, ns1.GeogLocationType_Def)
                ns1.LatLonPointType_Def.__bases__ = tuple(bases)
            ns1.GeogLocationType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)
            

    class seriesCatalogType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "seriesCatalogType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.seriesCatalogType_Def.schema
            TClist = [self.__class__.note_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), self.__class__.series_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["menuGroupName"] = ZSI.TC.String()
                self.attribute_typecode_dict["serviceWsdl"] = ZSI.TC.URI()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._note = []
                    self._series = []
                    return
            Holder.__name__ = "seriesCatalogType_Holder"
            self.pyclass = Holder


        class note_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "note"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.seriesCatalogType_Def.note_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","note")
                kw["aname"] = "_note"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "note_Holder"
                self.pyclass = Holder





        class series_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "series"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.seriesCatalogType_Def.series_Dec.schema
                TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","dataTypeEnum",lazy=False)(pname=(ns,"dataType"), aname="_dataType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","VariableInfoType",lazy=False)(pname=(ns,"variable"), aname="_variable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.valueCount_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","TimePeriodType",lazy=False)(pname=(ns,"variableTimeInterval"), aname="_variableTimeInterval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","valueTypeEnum",lazy=False)(pname=(ns,"valueType"), aname="_valueType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","generalCategoryEnum",lazy=False)(pname=(ns,"generalCategory"), aname="_generalCategory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","SampleMediumEnum",lazy=False)(pname=(ns,"sampleMedium"), aname="_sampleMedium", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","MethodType",lazy=False)(pname=(ns,"Method"), aname="_Method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","SourceType",lazy=False)(pname=(ns,"Source"), aname="_Source", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","QualityControlLevelType",lazy=False)(pname=(ns,"QualityControlLevel"), aname="_QualityControlLevel", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","series")
                kw["aname"] = "_series"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._dataType = None
                        self._variable = None
                        self._valueCount = None
                        self._variableTimeInterval = None
                        self._valueType = None
                        self._generalCategory = None
                        self._sampleMedium = None
                        self._Method = None
                        self._Source = None
                        self._QualityControlLevel = None
                        return
                Holder.__name__ = "series_Holder"
                self.pyclass = Holder


            class valueCount_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "valueCount"
                schema = "http://www.cuahsi.org/waterML/1.0/"
                def __init__(self, **kw):
                    ns = ns1.seriesCatalogType_Def.series_Dec.valueCount_Dec.schema
                    TClist = []
                    kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","valueCount")
                    kw["aname"] = "_valueCount"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            return
                    Holder.__name__ = "valueCount_Holder"
                    self.pyclass = Holder







    class dataTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "dataTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VariableInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "VariableInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VariableInfoType_Def.schema
            TClist = [self.__class__.variableCode_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"variableName"), aname="_variableName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"variableDescription"), aname="_variableDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","valueTypeEnum",lazy=False)(pname=(ns,"valueType"), aname="_valueType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","dataTypeEnum",lazy=False)(pname=(ns,"dataType"), aname="_dataType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","generalCategoryEnum",lazy=False)(pname=(ns,"generalCategory"), aname="_generalCategory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","SampleMediumEnum",lazy=False)(pname=(ns,"sampleMedium"), aname="_sampleMedium", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.units_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","ArrayOfOption",lazy=False)(pname=(ns,"options"), aname="_options", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.note_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), self.__class__.related_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"extension"), aname="_extension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NoDataValue"), aname="_NoDataValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.timeSupport_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["oid"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["metadataDateTime"] = ZSI.TCtimes.gDateTime()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variableCode = []
                    self._variableName = None
                    self._variableDescription = None
                    self._valueType = None
                    self._dataType = None
                    self._generalCategory = None
                    self._sampleMedium = None
                    self._units = None
                    self._options = None
                    self._note = []
                    self._related = None
                    self._extension = None
                    self._NoDataValue = None
                    self._timeSupport = None
                    return
            Holder.__name__ = "VariableInfoType_Holder"
            self.pyclass = Holder


        class variableCode_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "variableCode"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.VariableInfoType_Def.variableCode_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","variableCode")
                kw["aname"] = "_variableCode"
                self.attribute_typecode_dict = {}
                ZSI.TC.String.__init__(self,typed=False,**kw)
                class Holder(str):
                    __metaclass__ = pyclass_type
                    typecode = self
                    #def __init__(self):
                        # pyclass
                        #return
                Holder.__name__ = "variableCode_Holder"
                self.pyclass = Holder





        class units_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "units"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.VariableInfoType_Def.units_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","units")
                kw["aname"] = "_units"
                self.attribute_typecode_dict = {}
                ZSI.TC.String.__init__(self,typed=False,**kw)
                class Holder(str):
                    __metaclass__ = pyclass_type
                    typecode = self
                    #def __init__(self):
                        # pyclass
                        #return
                Holder.__name__ = "units_Holder"
                self.pyclass = Holder





        class note_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "note"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.VariableInfoType_Def.note_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","note")
                kw["aname"] = "_note"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "note_Holder"
                self.pyclass = Holder





        class related_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "related"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.VariableInfoType_Def.related_Dec.schema
                TClist = [self.__class__.parentID_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), self.__class__.relatedID_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","related")
                kw["aname"] = "_related"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._parentID = []
                        self._relatedID = []
                        return
                Holder.__name__ = "related_Holder"
                self.pyclass = Holder


            class parentID_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "parentID"
                schema = "http://www.cuahsi.org/waterML/1.0/"
                def __init__(self, **kw):
                    ns = ns1.VariableInfoType_Def.related_Dec.parentID_Dec.schema
                    TClist = []
                    kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","parentID")
                    kw["aname"] = "_parentID"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            return
                    Holder.__name__ = "parentID_Holder"
                    self.pyclass = Holder





            class relatedID_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "relatedID"
                schema = "http://www.cuahsi.org/waterML/1.0/"
                def __init__(self, **kw):
                    ns = ns1.VariableInfoType_Def.related_Dec.relatedID_Dec.schema
                    TClist = []
                    kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","relatedID")
                    kw["aname"] = "_relatedID"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            return
                    Holder.__name__ = "relatedID_Holder"
                    self.pyclass = Holder








        class timeSupport_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "timeSupport"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.VariableInfoType_Def.timeSupport_Dec.schema
                TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","UnitsType",lazy=False)(pname=(ns,"unit"), aname="_unit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"timeInterval"), aname="_timeInterval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","timeSupport")
                kw["aname"] = "_timeSupport"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                # attribute handling code
                self.attribute_typecode_dict["isRegular"] = ZSI.TC.Boolean()
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._unit = None
                        self._timeInterval = None
                        return
                Holder.__name__ = "timeSupport_Holder"
                self.pyclass = Holder




    class valueTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "valueTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class generalCategoryEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "generalCategoryEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SampleMediumEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "SampleMediumEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitsTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "UnitsTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfOption_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "ArrayOfOption")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ArrayOfOption_Def.schema
            TClist = [self.__class__.option_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._option = []
                    return
            Holder.__name__ = "ArrayOfOption_Holder"
            self.pyclass = Holder


        class option_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "option"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.ArrayOfOption_Def.option_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","option")
                kw["aname"] = "_option"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "option_Holder"
                self.pyclass = Holder




    class UnitsType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "UnitsType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.UnitsType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"UnitName"), aname="_UnitName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UnitDescription"), aname="_UnitDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","UnitsTypeEnum",lazy=False)(pname=(ns,"UnitType"), aname="_UnitType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UnitAbbreviation"), aname="_UnitAbbreviation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["UnitID"] = ZSI.TCnumbers.Iint()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._UnitName = None
                    self._UnitDescription = None
                    self._UnitType = None
                    self._UnitAbbreviation = None
                    return
            Holder.__name__ = "UnitsType_Holder"
            self.pyclass = Holder

    class TimePeriodType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "TimePeriodType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TimePeriodType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self,typeIndicator="Inteval"):
                    # pyclass
                    if (typeIndicator=="Inteval"):
                        TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"beginDateTime"), aname="_beginDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]               
                        self.typecode.setDerivedTypeContents(restrictions=TClist)
                        self._beginDateTime=None
                        self._endDateTime=None
                    elif (typeIndicator=="Single"):
                        TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"timeSingle"), aname="_timeSingle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"beginDateTime"), aname="_beginDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                        self.typecode.setDerivedTypeContents(restrictions=TClist)
                        pass
                    return
            Holder.__name__ = "TimePeriodType_Holder"
            self.pyclass = Holder

    class TimeSingleType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "TimeSingleType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TimeSingleType_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"timeSingle"), aname="_timeSingle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"beginDateTime"), aname="_beginDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TimePeriodType_Def not in ns1.TimeSingleType_Def.__bases__:
                bases = list(ns1.TimeSingleType_Def.__bases__)
                bases.insert(0, ns1.TimePeriodType_Def)
                ns1.TimeSingleType_Def.__bases__ = tuple(bases)

            ns1.TimePeriodType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimePeriodRealTimeType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "TimePeriodRealTimeType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TimePeriodRealTimeType_Def.schema
            TClist = [ZSI.TCtimes.Duration(pname=(ns,"realTimeDataPeriod"), aname="_realTimeDataPeriod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"beginDateTime"), aname="_beginDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TimePeriodType_Def not in ns1.TimePeriodRealTimeType_Def.__bases__:
                bases = list(ns1.TimePeriodRealTimeType_Def.__bases__)
                bases.insert(0, ns1.TimePeriodType_Def)
                ns1.TimePeriodRealTimeType_Def.__bases__ = tuple(bases)

            ns1.TimePeriodType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeIntervalType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "TimeIntervalType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TimeIntervalType_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"beginDateTime"), aname="_beginDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TimePeriodType_Def not in ns1.TimeIntervalType_Def.__bases__:
                bases = list(ns1.TimeIntervalType_Def.__bases__)
                bases.insert(0, ns1.TimePeriodType_Def)
                ns1.TimeIntervalType_Def.__bases__ = tuple(bases)

            ns1.TimePeriodType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MethodType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "MethodType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.MethodType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"MethodDescription"), aname="_MethodDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MethodLink"), aname="_MethodLink", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["methodID"] = ZSI.TCnumbers.Iint()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MethodDescription = None
                    self._MethodLink = None
                    return
            Holder.__name__ = "MethodType_Holder"
            self.pyclass = Holder

    class SourceType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "SourceType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SourceType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Organization"), aname="_Organization", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SourceDescription"), aname="_SourceDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","MetaDataType",lazy=False)(pname=(ns,"Metadata"), aname="_Metadata", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","ContactInformationType",lazy=False)(pname=(ns,"ContactInformation"), aname="_ContactInformation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"SourceLink"), aname="_SourceLink", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["sourceID"] = ZSI.TCnumbers.Iint()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Organization = None
                    self._SourceDescription = None
                    self._Metadata = None
                    self._ContactInformation = None
                    self._SourceLink = None
                    return
            Holder.__name__ = "SourceType_Holder"
            self.pyclass = Holder

    class MetaDataType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "MetaDataType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.MetaDataType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"TopicCategory"), aname="_TopicCategory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Abstract"), aname="_Abstract", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProfileVersion"), aname="_ProfileVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"MetadataLink"), aname="_MetadataLink", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TopicCategory = None
                    self._Title = None
                    self._Abstract = None
                    self._ProfileVersion = None
                    self._MetadataLink = None
                    return
            Holder.__name__ = "MetaDataType_Holder"
            self.pyclass = Holder

    class ContactInformationType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "ContactInformationType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ContactInformationType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ContactName"), aname="_ContactName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TypeOfContact"), aname="_TypeOfContact", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Phone"), aname="_Phone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Email"), aname="_Email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"Address"), aname="_Address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ContactName = None
                    self._TypeOfContact = None
                    self._Phone = None
                    self._Email = None
                    self._Address = None
                    return
            Holder.__name__ = "ContactInformationType_Holder"
            self.pyclass = Holder

    class QualityControlLevelType_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "QualityControlLevelType")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["QualityControlLevelID"] = ZSI.TCnumbers.Iint()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                __metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class VariablesResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "VariablesResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VariablesResponseType_Def.schema
            TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","ArrayOfVariableInfoType",lazy=False)(pname=(ns,"variables"), aname="_variables", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variables = None
                    return
            Holder.__name__ = "VariablesResponseType_Holder"
            self.pyclass = Holder

    class ArrayOfVariableInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "ArrayOfVariableInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ArrayOfVariableInfoType_Def.schema
            TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","VariableInfoType",lazy=False)(pname=(ns,"variable"), aname="_variable", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variable = []
                    return
            Holder.__name__ = "ArrayOfVariableInfoType_Holder"
            self.pyclass = Holder

    class TimeSeriesResponseType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "TimeSeriesResponseType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TimeSeriesResponseType_Def.schema
            TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","QueryInfoType",lazy=False)(pname=(ns,"queryInfo"), aname="_queryInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","TimeSeriesType",lazy=False)(pname=(ns,"timeSeries"), aname="_timeSeries", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._queryInfo = None
                    self._timeSeries = None
                    return
            Holder.__name__ = "TimeSeriesResponseType_Holder"
            self.pyclass = Holder

    class TimeSeriesType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "TimeSeriesType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TimeSeriesType_Def.schema
            TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","SourceInfoType",lazy=False)(pname=(ns,"sourceInfo"), aname="_sourceInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","VariableInfoType",lazy=False)(pname=(ns,"variable"), aname="_variable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.cuahsi.org/waterML/1.0/","TsValuesSingleVariableType",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["name"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sourceInfo = None
                    self._variable = None
                    self._values = None
                    return
            Holder.__name__ = "TimeSeriesType_Holder"
            self.pyclass = Holder

    class TsValuesSingleVariableType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "TsValuesSingleVariableType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TsValuesSingleVariableType_Def.schema
            TClist = [GTD("http://www.cuahsi.org/waterML/1.0/","ValueSingleVariable",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.qualifier_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), self.__class__.qualityControlLevel_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["timeZoneShiftApplied"] = ZSI.TC.Boolean()
                self.attribute_typecode_dict["unitsAbbreviation"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["unitsCode"] = ZSI.TC.Token()
                self.attribute_typecode_dict["unitsType"] = ns1.UnitsTypeEnum_Def(None)
                self.attribute_typecode_dict["count"] = ZSI.TCnumbers.InonNegativeInteger()
                self.attribute_typecode_dict["unitsAreConverted"] = ZSI.TC.Boolean()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = []
                    self._qualifier = []
                    self._qualityControlLevel = None
                    return
            Holder.__name__ = "TsValuesSingleVariableType_Holder"
            self.pyclass = Holder


        class qualifier_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "qualifier"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.TsValuesSingleVariableType_Def.qualifier_Dec.schema
                TClist = []
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","qualifier")
                kw["aname"] = "_qualifier"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "qualifier_Holder"
                self.pyclass = Holder





        class qualityControlLevel_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "qualityControlLevel"
            schema = "http://www.cuahsi.org/waterML/1.0/"
            def __init__(self, **kw):
                ns = ns1.TsValuesSingleVariableType_Def.qualityControlLevel_Dec.schema
                TClist = [ZSI.TC.AnyType(pname=(ns,"qualityControlLevelID"), aname="_qualityControlLevelID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","qualityControlLevel")
                kw["aname"] = "_qualityControlLevel"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                # attribute handling code
                self.attribute_typecode_dict["qualityControlLevelCode"] = ZSI.TC.String()
                self.attribute_typecode_dict["oid"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["metadataDateTime"] = ZSI.TCtimes.gDateTime()
                self.attribute_typecode_dict["network"] = ZSI.TC.String()
                self.attribute_typecode_dict["vocabulary"] = ZSI.TC.String()
                self.attribute_typecode_dict["default"] = ZSI.TC.Boolean()
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._qualityControlLevelID = None
                        return
                Holder.__name__ = "qualityControlLevel_Holder"
                self.pyclass = Holder




    class ValueSingleVariable_Def(ZSI.TC.Decimal, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "ValueSingleVariable")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["qualifiers"] = ZSI.TC.String()
            self.attribute_typecode_dict["censorCode"] = ns1.CensorCodeEnum_Def(None)
            self.attribute_typecode_dict["dateTime"] = ZSI.TCtimes.gDateTime()
            self.attribute_typecode_dict["qualityControlLevel"] = ns1.QualityControlLevelEnum_Def(None)
            self.attribute_typecode_dict["methodID"] = ZSI.TC.String()
            self.attribute_typecode_dict["sourceID"] = ZSI.TC.String()
            self.attribute_typecode_dict["accuracyStdDev"] = ZSI.TCnumbers.FPdouble()
            self.attribute_typecode_dict["codedVocabulary"] = ZSI.TC.Boolean()
            self.attribute_typecode_dict["codedVocabularyTerm"] = ZSI.TC.String()
            self.attribute_typecode_dict["sampleID"] = ZSI.TC.String()
            self.attribute_typecode_dict["offsetValue"] = ZSI.TCnumbers.FPdouble()
            self.attribute_typecode_dict["offsetUnitsAbbreviation"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["offsetDescription"] = ZSI.TC.String()
            self.attribute_typecode_dict["offsetUnitsCode"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["oid"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["metadataDateTime"] = ZSI.TCtimes.gDateTime()
            ZSI.TC.Decimal.__init__(self, pname, **kw)
            class Holder(float):
                __metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class CensorCodeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "CensorCodeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QualityControlLevelEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.cuahsi.org/waterML/1.0/"
        type = (schema, "QualityControlLevelEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class sitesResponse_Dec(ElementDeclaration):
        literal = "sitesResponse"
        schema = "http://www.cuahsi.org/waterML/1.0/"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","sitesResponse")
            kw["aname"] = "_sitesResponse"
            if ns1.SiteInfoResponseType_Def not in ns1.sitesResponse_Dec.__bases__:
                bases = list(ns1.sitesResponse_Dec.__bases__)
                bases.insert(0, ns1.SiteInfoResponseType_Def)
                ns1.sitesResponse_Dec.__bases__ = tuple(bases)

            ns1.SiteInfoResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "sitesResponse_Dec_Holder"

    class variablesResponse_Dec(ElementDeclaration):
        literal = "variablesResponse"
        schema = "http://www.cuahsi.org/waterML/1.0/"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","variablesResponse")
            kw["aname"] = "_variablesResponse"
            if ns1.VariablesResponseType_Def not in ns1.variablesResponse_Dec.__bases__:
                bases = list(ns1.variablesResponse_Dec.__bases__)
                bases.insert(0, ns1.VariablesResponseType_Def)
                ns1.variablesResponse_Dec.__bases__ = tuple(bases)

            ns1.VariablesResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "variablesResponse_Dec_Holder"

    class timeSeriesResponse_Dec(ElementDeclaration):
        literal = "timeSeriesResponse"
        schema = "http://www.cuahsi.org/waterML/1.0/"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.cuahsi.org/waterML/1.0/","timeSeriesResponse")
            kw["aname"] = "_timeSeriesResponse"
            if ns1.TimeSeriesResponseType_Def not in ns1.timeSeriesResponse_Dec.__bases__:
                bases = list(ns1.timeSeriesResponse_Dec.__bases__)
                bases.insert(0, ns1.TimeSeriesResponseType_Def)
                ns1.timeSeriesResponse_Dec.__bases__ = tuple(bases)

            ns1.TimeSeriesResponseType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "timeSeriesResponse_Dec_Holder"

# end class ns1 (tns: http://www.cuahsi.org/waterML/1.0/)
